---
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*.*.*'     # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 10
    strategy:
      max-parallel: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

      - name: Install go
        run: |
          curl -L -o /tmp/go.pkg https://golang.org/dl/go1.16.darwin-amd64.pkg
          sudo installer -pkg /tmp/go.pkg -target /

      - name: Run tests
        run: |
          /usr/local/go/bin/go mod init
          /usr/local/go/bin/go mod vendor
          /usr/local/go/bin/go test ./core

      - name: Build universal binary
        run: |
          /bin/bash .github/build.sh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: Release ${{ steps.vars.outputs.tag }}
          body: 'Please enter details before publishing draft release'
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./committer
          asset_name: committer-${{ steps.vars.outputs.tag }}
          asset_content_type: application/octet-stream
